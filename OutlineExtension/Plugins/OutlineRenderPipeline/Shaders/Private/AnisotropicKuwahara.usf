#include "/Engine/Private/Common.ush"



//
// AnisoKuwaharaEigenvectorパス(固有ベクトルを求めている？構造テンソルの計算？)
//
// ガンマ補正を掛ける
float3 GammaCorrectFunction(float gamma, float3 color)
{
	return float3(pow(color.x, 1.0f / gamma), pow(color.y, 1.0f / gamma), pow(color.z, 1.0f / gamma));
}

Texture2D<float4> eigenvectorpass_SourceTexture;
RWTexture2D<float4> eigenvectorpass_OutputTexture;

[numthreads(THREADGROUPSIZE_X,THREADGROUPSIZE_Y,THREADGROUPSIZE_Z)]
void AnisoKuwaharaEigenvectorCS(uint2 DTid : SV_DispatchThreadID)
{
	// const float3 LuminanceConv = float3( 0.2125f, 0.7154f, 0.0721f );
	const float3 LuminanceConv = float3( 0.299f, 0.587f, 0.114f );
	// const float3 LuminanceConv = float3( 1.0f, 1.0f, 1.0f );

	// ガンマ補正を考慮する
	const float f00 = dot(GammaCorrectFunction(2.2f, eigenvectorpass_SourceTexture[DTid.xy + int2(-1, -1)].xyz), LuminanceConv);
	const float f10 = dot(GammaCorrectFunction(2.2f, eigenvectorpass_SourceTexture[DTid.xy + int2(0, -1)].xyz), LuminanceConv);
	const float f20 = dot(GammaCorrectFunction(2.2f, eigenvectorpass_SourceTexture[DTid.xy + int2(1, -1)].xyz), LuminanceConv);

	const float f01 = dot(GammaCorrectFunction(2.2f, eigenvectorpass_SourceTexture[DTid.xy + int2(-1, 0)].xyz), LuminanceConv);
	const float f21 = dot(GammaCorrectFunction(2.2f, eigenvectorpass_SourceTexture[DTid.xy + int2(1, 0)].xyz), LuminanceConv);
		
	const float f02 = dot(GammaCorrectFunction(2.2f, eigenvectorpass_SourceTexture[DTid.xy + int2(-1, 1)].xyz), LuminanceConv);
	const float f12 = dot(GammaCorrectFunction(2.2f, eigenvectorpass_SourceTexture[DTid.xy + int2(0, 1)].xyz), LuminanceConv);
	const float f22 = dot(GammaCorrectFunction(2.2f, eigenvectorpass_SourceTexture[DTid.xy + int2(1, 1)].xyz), LuminanceConv);
	
	// sobel.
	const float sx = ((1.0*f20 + 2.0*f21 + 1.0*f22) - (1.0*f00 + 2.0*f01 + 1.0*f02));
	const float sy = ((1.0*f02 + 2.0*f12 + 1.0*f22) - (1.0*f00 + 2.0*f10 + 1.0*f20));
	// gijの計算
	// Sobelフィルタで求めた結果をベクトル化している
	// TODO : 元コード
	// const float exx = clamp(sx * sx, 0.0f, 255.0f); // E
	// const float exy = clamp(sx * sy, 0.0f, 255.0f); // F
	// const float eyy = clamp(sy * sy, 0.0f, 255.0f); // G
	// NOTE : 実験
	const float exx = sx * sx; // E
	const float exy = sx * sy; // F
	const float eyy = sy * sy; // G
	// 各成分の大きさをベクトルとして使用する
	eigenvectorpass_OutputTexture[DTid.xy] = float4(exx, eyy, exy, 1);

	// NOTE : 実験
	// Sobelフィルタでエッジを強調する(勾配強度)
	// const float color = sqrt(sx * sx + sy * sy);
	// const float intensity = saturate(color * 4.0f); 
	// eigenvectorpass_OutputTexture[DTid.xy] = float4(intensity, intensity, intensity, intensity);
}

//
// BlurPass_CS
//
float GaussFunction(float sigma, float r)
{
	const float PI = 3.14159265;
	//
	// Gσの計算
	// [P4]論文にあるガウスフィルタの計算( https://www.kyprianidis.com/p/pg2009/jkyprian-pg2009.pdf )
	// ※微分
	return (1.0f / sqrt(2.0f * PI * sigma * sigma)) * exp(-(r * r) / (2.0f * sigma * sigma));
}

Texture2D blurpass_SourceTexture;
RWTexture2D<float4> blurpass_OutputTexture;
uint2 blurpass_OutputDimensions;
int GaussRadius;
float GaussSigma;

[numthreads(THREADGROUPSIZE_X,THREADGROUPSIZE_Y,THREADGROUPSIZE_Z)]
void AnisoKuwaharaBlurCS(
	uint3 Gid	: SV_GroupID,
	uint3 DTid	: SV_DispatchThreadID,
	uint3 GTid	: SV_GroupThreadID,
	uint Gi		: SV_GroupIndex
	)
{
	// カーネル範囲
	const int kernelRadius = GaussRadius;
	const float gauss_sigma = GaussSigma;
	const int2 pixel_point = DTid.xy;
	
	float4 accum_data = (float4)0;
	float  accum_weight = 0;
	for(int j = -kernelRadius; j <= kernelRadius; ++j)
	{
		for(int i = -kernelRadius; i <= kernelRadius; ++i)
		{
			const int2 sample_offset = int2(i,j);
			const float4 sampleL_data = blurpass_SourceTexture.Load(int3(pixel_point + sample_offset, 0));

			// ガウシアンフィルタ
			const float g = GaussFunction(gauss_sigma, length(sample_offset));

			// fxの計算
			// 関数 f の偏導関数の近似
			accum_data += g * sampleL_data;
			accum_weight += g;
		}
	}

	// 平坦化
	// NOTE : ひょっとして二重にかけている？
	accum_data /= accum_weight;
		
	blurpass_OutputTexture[DTid.xy] = accum_data;
}

//
// TODO : GaussHSBlurCS / GaussVSBlurCS を動かしてみる
// ガウスフィルタを横 ➡ 縦で計算し直す
[numthreads(THREADGROUPSIZE_X,THREADGROUPSIZE_Y,THREADGROUPSIZE_Z)]
void GaussHSBlurCS(
	uint3 Gid	: SV_GroupID,
	uint3 DTid	: SV_DispatchThreadID,
	uint3 GTid	: SV_GroupThreadID,
	uint Gi		: SV_GroupIndex
	)
{
	// カーネル範囲
	const int kernelRadius = GaussRadius;
	const float gauss_sigma = GaussSigma;
	const int2 pixel_point = DTid.xy;

	// 方法①
	// float BufferGaussKernel[22] = {0.06634167f, 0.07942539f, 0.09136096f, 0.1009695f, 0.1072131f, 0.1093789f, 0.1072131f, 0.1009695f, 0.09136096f, 0.07942539f, 0.06634167f,
	//						   0.08066656f, 0.08654258f, 0.09140719f, 0.09504844f, 0.09730244f, 0.0980656f, 0.09730244f, 0.09504844f, 0.09140719f, 0.08654258f, 0.08066656};

	float4 sum = float4(0.0f, 0.0f, 0.0f, 0.0f);
	float  accum_weight = 0;
	for (int x = -kernelRadius; x <= kernelRadius; x++)
	{
		const float4 sampleL_data = blurpass_SourceTexture.Load(int3(pixel_point + int2(x, 0), 0));
		// 方法①
		// sum += BufferGaussKernel[x + kernelRadius] * sampleL_data;
		const float g = GaussFunction(gauss_sigma, length(int2(x, 0)));
		sum += g * sampleL_data;
		accum_weight += g;
	}
	// 方法①
	// blurpass_OutputTexture[DTid.xy] = sum;
	blurpass_OutputTexture[DTid.xy] = sum / accum_weight;
}

[numthreads(THREADGROUPSIZE_X,THREADGROUPSIZE_Y,THREADGROUPSIZE_Z)]
void GaussVSBlurCS(
	uint3 Gid	: SV_GroupID,
	uint3 DTid	: SV_DispatchThreadID,
	uint3 GTid	: SV_GroupThreadID,
	uint Gi		: SV_GroupIndex
	)
{
	// カーネル範囲
	const int kernelRadius = GaussRadius;
	const float gauss_sigma = GaussSigma;
	const int2 pixel_point = DTid.xy;

	// 方法①
	// float BufferGaussKernel[22] = {0.06634167f, 0.07942539f, 0.09136096f, 0.1009695f, 0.1072131f, 0.1093789f, 0.1072131f, 0.1009695f, 0.09136096f, 0.07942539f, 0.06634167f,
	//						   0.08066656f, 0.08654258f, 0.09140719f, 0.09504844f, 0.09730244f, 0.0980656f, 0.09730244f, 0.09504844f, 0.09140719f, 0.08654258f, 0.08066656};

	float4 sum = float4(0.0f, 0.0f, 0.0f, 0.0f);
	float  accum_weight = 0;
	for (int y = -kernelRadius; y <= kernelRadius; y++)
	{
		const float4 sampleL_data = blurpass_SourceTexture.Load(int3(pixel_point + int2(0, y), 0));
		// 方法①
		// sum += BufferGaussKernel[y + kernelRadius] * sampleL_data;
		const float g = GaussFunction(gauss_sigma, length(int2(0, y)));
		sum += g * sampleL_data;
		accum_weight += g;
	}
	// 方法①
	// blurpass_OutputTexture[DTid.xy] = sum;
	blurpass_OutputTexture[DTid.xy] = sum / accum_weight;
}



//
// Calc Anisotropy.(局所方位と異方性の尺度の計算？)
//
Texture2D calcanisopass_SourceTexture;
RWTexture2D<float4> calcanisopass_OutputTexture;

[numthreads(THREADGROUPSIZE_X,THREADGROUPSIZE_Y,THREADGROUPSIZE_Z)]
void AnisoKuwaharaCalcAnisoCS(
	uint3 Gid	: SV_GroupID,
	uint3 DTid	: SV_DispatchThreadID,
	uint3 GTid	: SV_GroupThreadID,
	uint Gi		: SV_GroupIndex
	)
{
	const int2 pixel_point = DTid.xy;
	
	const float4 eigenvector = calcanisopass_SourceTexture.Load(int3(pixel_point, 0));
	const float E = eigenvector.x; // dot(sx, sx)
	const float G = eigenvector.y; // dot(sy, sy)
	const float F = eigenvector.z; // dot(sy, sy)

	//----------------------------------------------------------
	// λ1,2 の計算
	//----------------------------------------------------------
	// [4P]の右上の上側の式
	const float sqrt_innner_term = (E-G)*(E-G) + 4.0*F*F;
	// [4P]の右上の上側の式
	const float term_sqrt = (1e-4 < sqrt_innner_term)? sqrt( sqrt_innner_term ) : 0.0;
	// [4P]の右上の上側の式
	const float lambda1 = (E + G + term_sqrt) * 0.5;
	const float lambda2 = (E + G - term_sqrt) * 0.5;

	//---------------------------------------------------------
	// Aの計算
	//---------------------------------------------------------
	const float anisotropy = (1e-4 < (lambda1 + lambda2))? (lambda1 - lambda2) / (lambda1 + lambda2) : 0.0f;
	//---------------------------------------------------------
	// tの計算
	//---------------------------------------------------------
	// TODO : 元コード
	// エッジが経たない
	// const float2 v = float2(lambda1 - E, -F);
	// const float2 t = (any(0 < abs(v)))? normalize(v) : float2(0.0f, 1.0f);
	// const float phi = -atan2(t.y, t.x);
	// calcanisopass_OutputTexture[DTid.xy] = float4(t.x, t.y, phi, anisotropy);

	// NOTE : Unityの計算方法に合わせた
	// float phi = length(float2(-F, lambda1 - E)) > 0.0f ? atan2(-F, lambda1 - E) : atan2(0.0f, 1.0f);
	// 発生するのはシアンのみ
	// const float phi = any(float2(-F, lambda1 - E) > 0.0f) ? -atan2(-F, lambda1 - E) : -atan2(0.0f, 1.0f);
	// XXX : 目的通りの動作をしてるけど、原理を理解できていない
	const float phi = any(float2(-F, lambda1 - E) > 0.0f) ? atan2(-F, lambda1 - E) : atan2(0.0f, 1.0f);
	// TODO : 青色(B成分)が出てくる
	// const float phi = any(abs(float2(-F, lambda1 - E)) > 0.0f) ? -atan2(-F, lambda1 - E) : -atan2(0.0f, 1.0f);
	// 色は、0.0f～1.0fの範囲
	// float3(cos(phi), sin(phi), phi) でエッジの向きは出ているっぽい。縦ずらし
	// float3(sin(phi), cos(phi), phi) でエッジの向きは出ているっぽい。横ずらし
	calcanisopass_OutputTexture[DTid.xy] = float4(cos(phi), sin(phi), phi, anisotropy);

	// NOTE : 分布図は違うがシアン成分が多く出てくる結果になった
	// Test①
	// const float phi = length(float2(-F, lambda1 - E)) > 0.0f ? -atan2(-F, lambda1 - E) : -atan2(0.0f, 1.0f);
	// calcanisopass_OutputTexture[DTid.xy] = float4(cos(phi), sin(phi), phi, anisotropy);
}


//
// 得られたベクトル場とフレームバッファに基づいて、線積分畳み込み（LIC）を計算.
//
Texture2D   lineintegranpass_TFMTexture;    // 入力
Texture2D   lineintegranpass_ColorTexture;  // 元画像
RWTexture2D<float4> lineintegranpass_OutputTexture; // 出力
int lineintegranpass_GaussRadius;
float lineintegranpass_GaussSigma;


half4 Integrate(float2 position, float2 direction, float2 invDimension) {
	// StructuredBuffer<float> BufferGaussKernel;  // カーネルを作成する必要がありそう
	float BufferGaussKernel[22] = {0.06634167f, 0.07942539f, 0.09136096f, 0.1009695f, 0.1072131f, 0.1093789f, 0.1072131f, 0.1009695f, 0.09136096f, 0.07942539f, 0.06634167f,
								   0.08066656f, 0.08654258f, 0.09140719f, 0.09504844f, 0.09730244f, 0.0980656f, 0.09730244f, 0.09504844f, 0.09140719f, 0.08654258f, 0.08066656};
  
	float4 sumWeight = 0.0h;
 
	for (int xi = 1; xi <= lineintegranpass_GaussRadius; xi++){     
		// float2 G = lineintegranpass_TFMTexture.SampleLevel(point_clamp_sampler, position, 0).xy;
		float2 G = lineintegranpass_TFMTexture.Load(int3(position, 0)).xy;
		direction = dot(direction, G) > 0.0h ? G : -G;

		// 案①　BufferGaussKernelを使わない方法を考える
		//
		// 案② BufferGaussKernelを作る
		// const int2 sample_offset = int2(i,j);
		// const float g = GaussFunction(gauss_sigma, length(sample_offset));
		//
		// 案③ BufferGaussKernelを作る
		// BufferGaussKernel は一次配列でアクセスする
		sumWeight += BufferGaussKernel[xi + lineintegranpass_GaussRadius] * float4(lineintegranpass_ColorTexture.Load(int3(position, 0)).xyz, 1.0);
		position += direction * invDimension;
	}  
	return sumWeight;
}

[numthreads(THREADGROUPSIZE_X,THREADGROUPSIZE_Y,THREADGROUPSIZE_Z)]
void LineIntegralConvolutionCS(uint3 DTid : SV_DispatchThreadID) {
	// StructuredBuffer<float> BufferGaussKernel;  // カーネルを作成する必要がありそう
	float BufferGaussKernel[22] = {0.06634167f, 0.07942539f, 0.09136096f, 0.1009695f, 0.1072131f, 0.1093789f, 0.1072131f, 0.1009695f, 0.09136096f, 0.07942539f, 0.06634167f,
								   0.08066656f, 0.08654258f, 0.09140719f, 0.09504844f, 0.09730244f, 0.0980656f, 0.09730244f, 0.09504844f, 0.09140719f, 0.08654258f, 0.08066656};

	float2 invDimension;
	// テクスチャのサイズを取得
	lineintegranpass_TFMTexture.GetDimensions(invDimension.x, invDimension.y);
	// 逆数
	// ロードを使うなら、UV座標だとおかしいはず
	invDimension = rcp(invDimension);
    
	float4 sumWeight = 0.0;
	// 割合を求める p / width = 0.0～1.0の範囲に直す
	// 元コード
	// float2 P = DTid.xy * invDimension;
	float2 P = DTid.xy;
	// float2 G = lineintegranpass_ColorTexture.SampleLevel(point_clamp_sampler, P, 0).xy;
	float2 G = lineintegranpass_TFMTexture.Load(int3(DTid.xy, 0)).xy;
   
	// NOTE : テスト中
	sumWeight += BufferGaussKernel[lineintegranpass_GaussRadius] * float4(lineintegranpass_ColorTexture.Load(int3(DTid.xy, 0)).xyz, 1.0);
	// 元コード
	// sumWeight += Integrate(P + G * invDimension, +G, invDimension);
	// sumWeight += Integrate(P - G * invDimension, -G, invDimension);

	sumWeight += Integrate(P + G, +G, float2(1.0f, 1.0f));
	sumWeight += Integrate(P - G, -G, float2(1.0f, 1.0f));
	const float3 color = float3(sumWeight.xyz / sumWeight.w);
	lineintegranpass_OutputTexture[DTid.xy] = float4(color, 1.0f);
}


//
// Final.
//
Texture2D finalpass_TFMTexture;
Texture2D finalpass_SceneTexture;
RWTexture2D<float4> finalpass_OutputTexture;

// TODO : 古いコード
float finalpass_aniso_control; // 1
float finalpass_hardness; // 8
float finalpass_sharpness; // 8

int KuwaharaRadius;
int KuwaharaQ;
float KuwaharaAlpha;

#define k_aniso_kuwahara_section_count 8

[numthreads(THREADGROUPSIZE_X,THREADGROUPSIZE_Y,THREADGROUPSIZE_Z)]
void AnisoKuwaharaFinalCS(
	uint3 Gid	: SV_GroupID,
	uint3 DTid	: SV_DispatchThreadID,
	uint3 GTid	: SV_GroupThreadID,
	uint Gi		: SV_GroupIndex
	)
{
	const float PI = 3.14159265;
	const float M_HALF_SQRT2 = 0.7071067811865475244f;
	
	// TODO : 元コード
	// const int k_kernel_radius = 7;
	// const float k_aniso_param = finalpass_aniso_control;//1.0;
	// Add
	const int k_kernel_radius = KuwaharaRadius;
	const int k_kernel_q = KuwaharaQ;
	const float k_aniso_param = KuwaharaAlpha;
	
	const int2 pixel_point = DTid.xy;

	const float4 aniso_data = finalpass_TFMTexture.Load(int3(pixel_point, 0));
	const float4 cur_color = finalpass_SceneTexture.Load(int3(pixel_point, 0));

	const float scale_a = k_kernel_radius * clamp((k_aniso_param + aniso_data.w) / k_aniso_param, 0.1, 5.0);
	const float scale_b = k_kernel_radius * clamp(k_aniso_param / (k_aniso_param + aniso_data.w), 0.1, 5.0);
	
	const float zeta = 2.0 / k_kernel_radius;
	const float gamma = 3.0 * PI / (2.0 * k_aniso_kuwahara_section_count);
	const float eta = (zeta + cos(gamma)) / (sin(gamma)*sin(gamma));

	// TODO : 元コード
	/*
	// NOTE : aniso_data(テンソル構造)を使用
	const float cos_phi = cos(aniso_data.z);
	const float sin_phi = sin(aniso_data.z);
	const float2x2 R = float2x2(cos_phi, -sin_phi, sin_phi, cos_phi);

	//---------------------------------------------------------
	// Sの計算
	// 異方性によるサンプル距離の最大・最小をクランプ.
	//---------------------------------------------------------
	// NOTE : 引数 KuwaharaRadius
	// NOTE : 引数 KuwaharaAlpha
	// NOTE : aniso_data(テンソル構造)を使用

	// TODO : 元のコード
	const float2x2 S = float2x2(1.0/scale_a, 0.0, 0.0, 1.0/scale_b);
	//
	// 異方性方向キャンセルと異方性スケールキャンセルの行列.
	float2x2 SR = mul(S, R);
	
	// TODO : この変数は消せる。もしくは、縦横で別ける事で、調整パラメータ化可能？
	const int sample_radius_x = k_kernel_radius;
	const int sample_radius_y = k_kernel_radius;
	
	// NOTE:テスト中 
	// Unity zeta = 0.33h
	//       eta  = 3.77h
	// const float zeta = 0.33f;
	// const float eta = 3.77f;

	 
	float4 m[k_aniso_kuwahara_section_count];
	float3 s[k_aniso_kuwahara_section_count];
	// TODO : 元のコード
	for (int k = 0; k < k_aniso_kuwahara_section_count; ++k) {
		m[k] = 0.0;
		s[k] = 0.0;
	}

	//
	// TODO : Unityのコードに沿ったテスト中の仮データ
	// 
	// {
	// 	float4 c = finalpass_SceneTexture[DTid.xy];
	// 	float w = rcp(float(k_aniso_kuwahara_section_count));
	// 	for (int k = 0; k < k_aniso_kuwahara_section_count; ++k) {
	// 		m[k] = float4(c.xyz * w, w);
	// 		float3 sc = c * c * w;
	// 		s[k] = sc.xyz;
	// 	}
	// }
	//  
	// float2x2 SR = float2x2(aniso_data.x/scale_a, -aniso_data.y/scale_b, aniso_data.y/scale_a, aniso_data.x/scale_b);
	//  
	// float3 total_color = float3(0.0f, 0.0f, 0.0f);
	// int total_count = 0;
	
	
	// 7回ループ
	for(int j = -sample_radius_y; j <= sample_radius_y; ++j)
	{
		for(int i = -sample_radius_x; i <= sample_radius_x; ++i)
		{
			const int2 sample_offset = int2(i, j);
			const float2 normalize_sample_offset = mul(SR, float2(sample_offset));
			
			const float3 sample_color = finalpass_SceneTexture.Load(int3(pixel_point + sample_offset, 0)).xyz;
			// total_color += sample_color;
			// total_count++;
			
			// https://github.com/GarrettGunnell/Post-Processing/blob/main/Assets/Kuwahara%20Filter/AnisotropicKuwahara.shader
			float2 v = normalize_sample_offset;
		
			float sum = 0;
            float w[k_aniso_kuwahara_section_count];
            float z, vxx, vyy;

			// フィルターカーネルの計算
            // * Calculate Polynomial Weights * / // 多項式の重みを計算する
            vxx = zeta - eta * v.x * v.x;
            vyy = zeta - eta * v.y * v.y;
            z = max(0, v.y + vxx); 
            w[0] = z * z;
            sum += w[0];
            z = max(0, -v.x + vyy); 
            w[2] = z * z;
            sum += w[2];
            z = max(0, -v.y + vxx); 
            w[4] = z * z;
            sum += w[4];
            z = max(0, v.x + vyy); 
            w[6] = z * z;
            sum += w[6];
			// TODO : Unityと違う
            v = sqrt(2.0f) / 2.0f * float2(v.x - v.y, v.x + v.y);
			// Unity版
			// v = 0.7071067811865475244f * float2(v.x - v.y, v.x + v.y);
            vxx = zeta - eta * v.x * v.x;
            vyy = zeta - eta * v.y * v.y;
            z = max(0, v.y + vxx); 
            w[1] = z * z;
            sum += w[1];
            z = max(0, -v.x + vyy); 
            w[3] = z * z;
            sum += w[3];
            z = max(0, -v.y + vxx); 
            w[5] = z * z;
            sum += w[5];
            z = max(0, v.x + vyy); 
            w[7] = z * z;
            sum += w[7];
            
            float g = (0.0 < sum)? exp(-3.125f * dot(v,v)) / sum : 0.0;
            for (int k = 0; k < k_aniso_kuwahara_section_count; ++k)
            {
                float wk = w[k] * g;
            	// Unityでも共通処理
                m[k] += float4(sample_color * wk, wk);
                s[k] += sample_color * sample_color * wk;

            	m[(k + 4) & 7] += half4(c1 * wk, wk);
            	s[(k + 4) & 7] += cc1 * wk;
            }
		}
	}
	*/


	float2x2 SR = float2x2(aniso_data.x / scale_a, -aniso_data.y / scale_b, aniso_data.y / scale_a, aniso_data.x / scale_b);
    
    int maxX = int(sqrt(scale_a * scale_a * aniso_data.x * aniso_data.x + scale_b * scale_b * aniso_data.y * aniso_data.y));
    int maxY = int(sqrt(scale_a * scale_a * aniso_data.y * aniso_data.y + scale_b * scale_b * aniso_data.x * aniso_data.x));

    float4 m[8];
    float3 s[8];
    {
        float3 c = finalpass_SceneTexture[DTid.xy];
        float w = rcp(float(k_aniso_kuwahara_section_count));
        for (int k = 0; k < k_aniso_kuwahara_section_count; k++) {
            m[k] = float4(c * w, w);
            s[k] = c * c * w;
        }
    }
    
    for (int j = 0; j <= maxY; j++) {
        for (int i = -maxX; i <= maxX; i++) {
            if ((j != 0) || (i > 0)) {
                float2 v = mul(SR, float2(i, j));
                float vdotv = dot(v, v);
                
                [branch]
                if (vdotv <= 1.0f) {
                 
                    float3 c0 = finalpass_SceneTexture[DTid.xy + int2(i, j)].xyz;
                    float3 c1 = finalpass_SceneTexture[DTid.xy - int2(i, j)].xyz;

                    float3 cc0 = c0 * c0;
                    float3 cc1 = c1 * c1;

                    float sum = 0.0h;
                    float w[8];
                    float z, vxx, vyy;
					
                    vxx = 0.33h - 3.77h * v.x * v.x;
                    vyy = 0.33h - 3.77h * v.y * v.y;
                    z = max(0.0h, +v.y + vxx); sum += w[0] = z * z;
                    z = max(0.0h, -v.x + vyy); sum += w[2] = z * z;
                    z = max(0.0h, -v.y + vxx); sum += w[4] = z * z;
                    z = max(0.0h, +v.x + vyy); sum += w[6] = z * z;

                    v = M_HALF_SQRT2 * float2(v.x - v.y, v.x + v.y);

                    vxx = 0.33h - 3.77h * v.x * v.x;
                    vyy = 0.33h - 3.77h * v.y * v.y;
                    z = max(0.0h, +v.y + vxx); sum += w[1] = z * z;
                    z = max(0.0h, -v.x + vyy); sum += w[3] = z * z;
                    z = max(0.0h, -v.y + vxx); sum += w[5] = z * z;
                    z = max(0.0h, +v.x + vyy); sum += w[7] = z * z;

                    // TODO : Unityコード
                    // float g = exp(-PI * vdotv) / sum;
                	float g = (0.0 < sum)? exp(-PI * dot(v,v)) / sum : 0.0;
					
                    for (int k = 0; k < k_aniso_kuwahara_section_count; ++k) {
                        float wk = w[k] * g;
                        m[k] += float4(c0 * wk, wk);
                        s[k] += cc0 * wk;
                        // Unity側の独自の処理
                        m[(k + 4) & 7] += float4(c1 * wk, wk);
                        s[(k + 4) & 7] += cc1 * wk;
                    }              
                }
            }
        }
    }


	
	// TODO : 置き換えるかパラメータとして残すか
	const float k_hardness = finalpass_hardness;//256;
	// TODO : 元コード
	// const float k_sharpness = finalpass_sharpness;//8.0;
	float k_sharpness = float(k_kernel_q);
	
	float4 output = (float4)0;
	for (int k = 0; k < k_aniso_kuwahara_section_count; ++k)
	{
		// Unityと共通処理
		const float weight_div = (0.0 < m[k].w)? 1.0/m[k].w : 0.0;
		m[k].rgb *= weight_div;
		s[k] = abs(s[k] * weight_div - m[k].rgb * m[k].rgb);

		const float sigma2 = s[k].r + s[k].g + s[k].b;
		// TODO  : 要検討
		// Unityだと 『255.0h *』となっている
		// TODOV : 元コード
		const float w = 1.0f / (1.0f + pow( k_hardness * 1000.0 * sigma2, k_sharpness));

		// Unityでお計算方法は同じ
		// Unity : o += w * half4(m[k].rgb, 1.0h);
		// TODO : 元コード
		output += float4(m[k].rgb * w, w);
	}
	// Unityでお計算方法は同じ
	// Unity : half3(o.rgb / o.w); 
	output.xyz = (0.0 < output.w)? output.xyz/output.w : cur_color.xyz;
	
	finalpass_OutputTexture[DTid.xy] = float4(output.xyz, 1.0f);

}